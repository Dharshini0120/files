/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

import React, { useMemo, useState, useEffect } from "react";
import {
  Box,
  Button,
  Typography,
  Paper,
  Tabs,
  Tab,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Tooltip,
  Divider,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Checkbox,
  FormControlLabel,
  LinearProgress,
} from "@mui/material";
import { AddOutlined, Edit, Delete as DeleteIcon } from "@mui/icons-material";
import { useQuery } from "@apollo/client";
import DashboardLayout from "../../components/layout/DashboardLayout";
import {
  GetAllRolesResponse,
  UIRole,
} from '@shared-types/role/role.type';
import { GET_ALL_ROLES } from "../../graphql/role.service";

type PermissionKey = "create" | "read" | "update" | "delete";
type ModuleDef = { key: string; label: string };

// ==== Styles ====
const gradientButtonSx = {
  background: "linear-gradient(90deg, #408bff 0%, #3a7de6 100%)",
  textTransform: "none",
  letterSpacing: "0.5px",
  fontWeight: 500,
  fontFamily: "var(--font-inter), sans-serif",
  borderRadius: "4px",
  padding: "8px 24px",
  boxShadow: "0 2px 8px rgba(64, 139, 255, 0.25)",
  "&:hover": {
    background: "linear-gradient(90deg, #3a7de6 0%, #3670cc 100%)",
    boxShadow: "0 4px 12px rgba(64, 139, 255, 0.3)",
  },
};

const headerCellSx = {
  backgroundColor: "#f3f7ff",
  color: "#1f2937",
  fontWeight: 700,
  borderBottom: "1px solid #e6ecf5",
};

// Custom checkbox with visible black border
function BorderedCheckbox(props: React.ComponentProps<typeof Checkbox>) {
  const Unchecked = (
    <span
      style={{
        width: 18,
        height: 18,
        border: "1.5px solid #000",
        borderRadius: 3,
        display: "inline-block",
        background: "#fff",
      }}
    />
  );
  const Checked = (
    <span
      style={{
        width: 18,
        height: 18,
        borderRadius: 3,
        display: "inline-block",
        background: "#3a7de6",
        position: "relative",
        boxShadow: "inset 0 0 0 1.5px #3a7de6",
      }}
    >
      <svg
        viewBox="0 0 24 24"
        style={{
          position: "absolute",
          inset: 0,
          margin: "auto",
          width: 18,
          height: 18,
          fill: "none",
          stroke: "white",
          strokeWidth: 3,
        }}
      >
        <polyline points="20 6 9 17 4 12" />
      </svg>
    </span>
  );

  return (
    <Checkbox
      disableRipple
      color="default"
      icon={Unchecked}
      checkedIcon={Checked}
      {...props}
      sx={{ p: 0.5 }}
    />
  );
}

const RolesAccessPage: React.FC = () => {
  const [tab, setTab] = useState(0);

  // ===== Fetch roles from API =====
  const { data, loading, error } = useQuery<GetAllRolesResponse>(GET_ALL_ROLES, {
    fetchPolicy: "cache-and-network",
  });

  // Transform API -> UI roles
  const apiRoles: UIRole[] = useMemo(() => {
    const list = data?.getAllRoles?.data ?? [];
    return list.map((r) => ({
      id: r._id,
      name: r.roleName,
      // API doesnâ€™t provide description now; show "No Description" in UI when rendering
      description: undefined,
      permissions: r.permissions || [],
    }));
  }, [data]);

  // Local roles state (to keep Add/Edit/Delete behavior in UI)
  const [roles, setRoles] = useState<UIRole[]>([]);
  useEffect(() => {
    setRoles(apiRoles);
  }, [apiRoles]);

  // ===== Add/Edit dialog =====
  const [dialogOpen, setDialogOpen] = useState(false);
  const [editingRole, setEditingRole] = useState<UIRole | null>(null);
  const [formName, setFormName] = useState("");
  const [formDesc, setFormDesc] = useState("");

  const openAdd = () => {
    setEditingRole(null);
    setFormName("");
    setFormDesc("");
    setDialogOpen(true);
  };
  const openEdit = (role: UIRole) => {
    setEditingRole(role);
    setFormName(role.name);
    setFormDesc(role.description || "");
    setDialogOpen(true);
  };
  const saveRole = () => {
    if (!formName.trim()) return;
    if (editingRole) {
      setRoles((prev) =>
        prev.map((r) =>
          r.id === editingRole.id
            ? { ...r, name: formName.trim(), description: formDesc.trim() }
            : r
        )
      );
    } else {
      setRoles((prev) => [
        ...prev,
        {
          id: String(Date.now()),
          name: formName.trim(),
          description: formDesc.trim(),
          permissions: [],
        },
      ]);
    }
    setDialogOpen(false);
  };

  // ===== Delete dialog =====
  const [deleteOpen, setDeleteOpen] = useState(false);
  const [roleToDelete, setRoleToDelete] = useState<UIRole | null>(null);

  const openDelete = (role: UIRole) => {
    setRoleToDelete(role);
    setDeleteOpen(true);
  };
  const confirmDelete = () => {
    if (!roleToDelete) return;
    setRoles((prev) => prev.filter((x) => x.id !== roleToDelete.id));
    setDeleteOpen(false);
    setRoleToDelete(null);
  };

  // ===== Access Rights =====
  const modules: ModuleDef[] = useMemo(
    () => [
      { key: "Dashboard", label: "Dashboard" },
      { key: "Usermanagement", label: "User Management" },
      { key: "auditlogs", label: "Audit Logs" },
      { key: "Assessment Engine or Template", label: "Templates" },
      { key: "assessment list", label: "Assessment Records" },
      { key: "roles_access", label: "Role & Access" },
      { key: "settings", label: "Settings" },
      { key: "Security", label: "Security" },
      { key: "Help", label: "Help" },
    ],
    []
  );

  // default select first role when available
  const [activeRoleId, setActiveRoleId] = useState<string>("");
  useEffect(() => {
    if (!activeRoleId && roles.length > 0) setActiveRoleId(roles[0].id);
  }, [roles, activeRoleId]);

  // permissions state: CRUD per module per role
  const [permissions, setPermissions] = useState<
    Record<string, Record<string, Record<PermissionKey, boolean>>>
  >({});

  // Initialize permissions from roles + modules.
  // If a module name exists in a role.permissions (API), pre-check "read" for that module.
  useEffect(() => {
    setPermissions((prev) => {
      const next = { ...prev };
      for (const role of roles) {
        next[role.id] ??= {};
        for (const m of modules) {
          const hasFromApi = role.permissions?.includes(m.key);
          next[role.id][m.key] ??= {
            create: false,
            read: Boolean(hasFromApi),
            update: false,
            delete: false,
          };
        }
      }
      // cleanup roles
      Object.keys(next).forEach((rid) => {
        if (!roles.some((r) => r.id === rid)) delete next[rid];
      });
      // cleanup modules
      Object.values(next).forEach((byModule) => {
        Object.keys(byModule).forEach((mk) => {
          if (!modules.some((m) => m.key === mk)) delete byModule[mk];
        });
      });
      return next;
    });
  }, [roles, modules]);

  const togglePerm = (roleId: string, moduleKey: string, key: PermissionKey) =>
    setPermissions((p) => ({
      ...p,
      [roleId]: {
        ...p[roleId],
        [moduleKey]: {
          ...p[roleId][moduleKey],
          [key]: !p[roleId][moduleKey][key],
        },
      },
    }));

  const saveAccess = () => {
    // TODO: call your Save Permissions mutation here with `permissions[activeRoleId]`
    alert("Save permissions API here");
  };

  return (
    <DashboardLayout>
      <Box>
        {/* Header */}
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            mb: 3,
          }}
        >
          <Box>
            <Typography
              variant="h5"
              fontWeight={700}
              sx={{ fontFamily: "var(--font-inter), sans-serif" }}
            >
              Roles & Access
            </Typography>
            <Typography
              variant="subtitle1"
              color="#6c757d"
              sx={{ fontFamily: "var(--font-inter), sans-serif" }}
            >
              Manage roles and set access permissions
            </Typography>
          </Box>

          {tab === 0 && (
            <Button
              onClick={openAdd}
              variant="contained"
              size="large"
              sx={gradientButtonSx}
            >
              <AddOutlined sx={{ mr: 1 }} />
              Add New Role
            </Button>
          )}
        </Box>

        <Paper sx={{ borderRadius: "12px", p: 2.5 }}>
          {/* Tabs */}
          <Tabs
            value={tab}
            onChange={(_, v) => setTab(v)}
            sx={{
              px: 1,
              "& .MuiTab-root": {
                textTransform: "none",
                fontWeight: 600,
                mr: 2,
                color: "#6b6b6b",
                "&.Mui-selected": {
                  color: "#000",
                  backgroundColor: "#f5f9ff",
                  borderRadius: "8px 8px 0 0",
                },
              },
              "& .MuiTabs-indicator": {
                height: 3,
                borderRadius: 2,
                backgroundColor: "#3a7de6",
              },
            }}
          >
            <Tab label="Roles" />
            <Tab label="Access Rights" />
          </Tabs>

          <Divider sx={{ mt: 1, mb: 2 }} />

          {/* Loading / Error for roles tab */}
          {loading && (
            <Box sx={{ px: 2, pb: 2 }}>
              <LinearProgress />
            </Box>
          )}
          {error && tab === 0 && (
            <Typography color="error" sx={{ px: 2, pb: 2 }}>
              Failed to load roles: {error.message}
            </Typography>
          )}

          {/* ROLES */}
          {tab === 0 && (
            <Box sx={{ overflowX: "auto" }}>
              <Table
                sx={{
                  width: { xs: "100%", md: "80%" },
                  maxWidth: 1000,
                  m: "0 auto",
                }}
              >
                <TableHead>
                  <TableRow>
                    <TableCell sx={headerCellSx} width={80}>
                      S.No
                    </TableCell>
                    <TableCell sx={headerCellSx}>Role Name</TableCell>
                    <TableCell sx={headerCellSx}>Description</TableCell>
                    <TableCell
                      sx={{ ...headerCellSx, textAlign: "right" }}
                      width={160}
                    >
                      Actions
                    </TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {roles.map((role, idx) => (
                    <TableRow
                      key={role.id}
                      sx={{
                        backgroundColor: idx % 2 ? "#f5f5f5" : "#fff",
                        "& td": { borderBottom: "1px solid #eef2f7" },
                      }}
                    >
                      <TableCell>{idx + 1}</TableCell>
                      <TableCell sx={{ fontWeight: 600 }}>
                        {role.name}
                      </TableCell>
                      <TableCell sx={{ color: "#6b7280" }}>
                        {role.description?.trim()
                          ? role.description
                          : "No Description"}
                      </TableCell>
                      <TableCell sx={{ textAlign: "right" }}>
                        <Tooltip title="Edit">
                          <IconButton onClick={() => openEdit(role)}>
                            <Edit style={{ fontSize: 25, color: "#408bff" }} />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Delete">
                          <IconButton onClick={() => openDelete(role)}>
                            <DeleteIcon
                              style={{ fontSize: 25, color: "#e53935" }}
                            />
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                    </TableRow>
                  ))}

                  {!loading && roles.length === 0 && (
                    <TableRow>
                      <TableCell colSpan={4} align="center" sx={{ py: 4 }}>
                        No roles found.
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </Box>
          )}

          {/* ACCESS RIGHTS */}
          {tab === 1 && (
            <Box>
              <Box sx={{ display: "flex", alignItems: "center", gap: 2, my: 4 }}>
                <FormControl sx={{ minWidth: 260 }}>
                  <InputLabel>Select Role</InputLabel>
                  <Select
                    label="Select Role"
                    value={activeRoleId}
                    onChange={(e) => setActiveRoleId(String(e.target.value))}
                    size="small"
                    sx={{
                      height: 40,
                      backgroundColor: "#fff",
                      boxShadow: "0 1px 2px rgba(16,24,40,0.04)",
                      "& .MuiOutlinedInput-notchedOutline": {
                        borderColor: "#e6ecf5",
                      },
                      "&:hover .MuiOutlinedInput-notchedOutline": {
                        borderColor: "#cfd7e6",
                      },
                      "&.Mui-focused .MuiOutlinedInput-notchedOutline": {
                        borderColor: "#408bff",
                      },
                    }}
                  >
                    {roles.map((r) => (
                      <MenuItem key={r.id} value={r.id}>
                        {r.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Box>

              <Box
                sx={{
                  border: "1px solid #e6ecf5",
                  borderRadius: 2,
                  backgroundColor: "#fff",
                  overflow: "hidden",
                  px: { xs: 1.5, md: 3 },
                  py: 1.5,
                }}
              >
                <Table sx={{ width: "100%" }}>
                  <TableHead>
                    <TableRow>
                      <TableCell sx={{ ...headerCellSx, width: 320 }}>
                        Module
                      </TableCell>
                      <TableCell sx={headerCellSx} align="center">
                        Create
                      </TableCell>
                      <TableCell sx={headerCellSx} align="center">
                        Read
                      </TableCell>
                      <TableCell sx={headerCellSx} align="center">
                        Update
                      </TableCell>
                      <TableCell sx={headerCellSx} align="center">
                        Delete
                      </TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {modules.map((m, i) => (
                      <TableRow
                        key={m.key}
                        sx={{
                          backgroundColor: i % 2 ? "#f5f5f5" : "#fff",
                          "& td": { borderBottom: "1px solid #eef2f7" },
                        }}
                      >
                        <TableCell sx={{ fontWeight: 600 }}>
                          {m.label}
                        </TableCell>
                        {(
                          ["create", "read", "update", "delete"] as PermissionKey[]
                        ).map((k) => (
                          <TableCell key={`${m.key}-${k}`} align="center">
                            <FormControlLabel
                              sx={{ m: 0 }}
                              control={
                                <BorderedCheckbox
                                  checked={Boolean(
                                    permissions[activeRoleId]?.[m.key]?.[k]
                                  )}
                                  onChange={() =>
                                    togglePerm(activeRoleId, m.key, k)
                                  }
                                />
                              }
                              label=""
                            />
                          </TableCell>
                        ))}
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>

                <Box sx={{ display: "flex", justifyContent: "center", py: 2.5 }}>
                  <Button variant="contained" sx={gradientButtonSx} onClick={saveAccess}>
                    Save For Changes
                  </Button>
                </Box>
              </Box>
            </Box>
          )}
        </Paper>

        {/* Add/Edit Role Dialog */}
        <Dialog
          open={dialogOpen}
          onClose={() => setDialogOpen(false)}
          fullWidth
          maxWidth="sm"
        >
          <DialogTitle sx={{ fontWeight: 700 }}>
            {editingRole ? "Edit Role" : "Add New Role"}
          </DialogTitle>
          <DialogContent sx={{ pt: 1 }}>
            <TextField
              fullWidth
              label="Role Name"
              value={formName}
              onChange={(e) => setFormName(e.target.value)}
              sx={{ mt: 1.5 }}
            />
            <TextField
              fullWidth
              label="Description"
              value={formDesc}
              onChange={(e) => setFormDesc(e.target.value)}
              sx={{ mt: 2 }}
              multiline
              minRows={2}
            />
          </DialogContent>
          <DialogActions sx={{ p: 2 }}>
            <Button
              variant="outlined"
              onClick={() => setDialogOpen(false)}
              sx={{
                textTransform: "uppercase",
                fontWeight: 500,
                color: "#408bff",
                borderColor: "#408bff",
                px: 3,
                "&:hover": {
                  backgroundColor: "rgba(64, 139, 255, 0.04)",
                  borderColor: "#408bff",
                },
              }}
            >
              Cancel
            </Button>
            <Button onClick={saveRole} variant="contained" sx={gradientButtonSx}>
              {editingRole ? "Save" : "Create"}
            </Button>
          </DialogActions>
        </Dialog>

        {/* Delete Role Dialog */}
        <Dialog
          open={deleteOpen}
          onClose={() => setDeleteOpen(false)}
          fullWidth
          maxWidth="sm"
        >
          <DialogTitle sx={{ fontWeight: 700 }}>Delete Role</DialogTitle>
          <DialogContent sx={{ pt: 1 }}>
            <Typography>
              Are you sure you want to delete the role{" "}
              <strong>{roleToDelete?.name}</strong>?
            </Typography>
          </DialogContent>
          <DialogActions sx={{ p: 2 }}>
            <Button
              variant="outlined"
              onClick={() => setDeleteOpen(false)}
              sx={{
                textTransform: "uppercase",
                fontWeight: 500,
                color: "#408bff",
                borderColor: "#408bff",
                px: 3,
                "&:hover": {
                  backgroundColor: "rgba(64, 139, 255, 0.04)",
                  borderColor: "#408bff",
                },
              }}
            >
              Cancel
            </Button>
            <Button variant="contained" color="error" onClick={confirmDelete}>
              Delete
            </Button>
          </DialogActions>
        </Dialog>
      </Box>
    </DashboardLayout>
  );
};

export default RolesAccessPage;
