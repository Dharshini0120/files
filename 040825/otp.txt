"use client";
import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useMutation } from "@apollo/client";
import { VERIFY_OTP_MUTATION, RESEND_OTP_MUTATION } from "../../../graphql/mutations/auth";
import { VerifyOtpInput, ResendOtpInput } from "../../../../../shared-types/src/auth/auth.types";
import Image from "next/image";
import {
  Box,
  Button,
  Typography,
  TextField,
  CircularProgress,
} from "@mui/material";
import { Inter } from "next/font/google";
import { toast } from "react-toastify";

const inter = Inter({ subsets: ["latin"], weight: ["400", "500", "600", "700"] });

const OTPPage: React.FC = () => {
  const [otp, setOtp] = useState<string[]>(Array(6).fill(""));
  const [timer, setTimer] = useState(90);
  const [isResendEnabled, setIsResendEnabled] = useState(false);
  const [error, setError] = useState("");
  const [shake, setShake] = useState(false);
  const router = useRouter();
  const [verifyOtp, { loading }] = useMutation(VERIFY_OTP_MUTATION);
  const [resendOtp, { loading: resendLoading }] = useMutation(RESEND_OTP_MUTATION);

  // Timer countdown
  useEffect(() => {
    if (timer > 0) {
      const interval = setInterval(() => setTimer((prev) => prev - 1), 1000);
      return () => clearInterval(interval);
    } else {
      setIsResendEnabled(true);
    }
  }, [timer]);

  const handleChange = (value: string, index: number) => {
    if (/^[0-9]?$/.test(value)) {
      const newOtp = [...otp];
      newOtp[index] = value;
      setOtp(newOtp);
      setError("");
      if (value && index < 5) {
        const nextInput = document.getElementById(`otp-${index + 1}`);
        nextInput?.focus();
      }
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>, index: number) => {
    if (e.key === "Backspace" && !otp[index] && index > 0) {
      const prevInput = document.getElementById(`otp-${index - 1}`);
      prevInput?.focus();
    }
  };

  const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {
    const pasteData = e.clipboardData.getData("Text").slice(0, 6);
    if (/^\d+$/.test(pasteData)) {
      const newOtp = pasteData.split("").concat(Array(6 - pasteData.length).fill(""));
      setOtp(newOtp);
      setError("");
    }
    e.preventDefault();
  };

  const handleResend = async () => {
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const email = urlParams.get("email");
      if (!email) {
        toast.error("Email not found. Please try signing up again.");
        router.push("/auth/signup");
        return;
      }
      const input: ResendOtpInput = { email };
      const response = await resendOtp({ variables: { input } });
      const result = response.data.resendOtp;

      if (result.status === "success") {
        setOtp(Array(6).fill(""));
        setTimer(90);
        setIsResendEnabled(false);
        setError("");
        toast.success(result.message || "OTP has been resent successfully!");
      } else {
        toast.error(result.message || "Failed to resend OTP. Please try again.");
      }
    } catch (error) {
      console.error("Resend OTP error:", error);
      toast.error("An unexpected error occurred. Please try again.");
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const otpCode = otp.join("");
    if (otpCode.length !== 6) return;

    setError("");
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const email = urlParams.get("email");
      const flow = urlParams.get("flow") || "signup";

      if (!email) {
        toast.error("Email not found. Please try again.");
        router.push("/auth/signup");
        return;
      }

      const input: VerifyOtpInput = { email, otpCode };
      const response = await verifyOtp({ variables: { input } });
      const result = response?.data?.verifyOtp;

      if (result?.status === "error" || result?.error) {
        toast.error(result?.message || "Invalid OTP. Please try again.");
        setShake(true);
        setTimeout(() => setShake(false), 500);
        return;
      }

      if (result?.status === "success") {
        toast.success(result?.message || "OTP verified successfully!");
        setTimeout(() => {
          router.push(`/auth/create-password?email=${encodeURIComponent(email)}&flow=${flow}`);
        }, 1500);
      } else {
        toast.error(result?.message || "Verification failed. Please try again.");
        setShake(true);
        setTimeout(() => setShake(false), 500);
      }
    } catch (err) {
      console.error("OTP Verification error:", err);
      toast.error("An unexpected error occurred. Please try again.");
      setShake(true);
      setTimeout(() => setShake(false), 500);
    }
  };

  const isOtpComplete = otp.join("").length === 6;

  return (
    <Box sx={{ display: "flex", height: "100vh", bgcolor: "#fff" }} className={inter.className}>
      {/* Background Overlay */}
      <Box
        sx={{
          position: "absolute",
          inset: 0,
          backgroundImage: "url('/login_bg.svg')",
          backgroundSize: "cover",
          backgroundPosition: "center",
          opacity: 0.1,
          zIndex: 0,
        }}
      />

      {/* Left Section */}
      <Box
        sx={{
          flex: 1.1,
          display: "flex",
          flexDirection: "column",
          justifyContent: "space-between",
          alignItems: "center",
          px: { xs: 1.5, md: 2 },
          py: { xs: 0.5, md: 1 },
          height: "100vh",
          position: "relative",
        }}
      >
        {/* Logo */}
        <Box sx={{ mt: { xs: 0, xl: "13px" } }}>
          <Image
            src="/medical-logo.png"
            alt="Company Logo"
            width={0}
            height={0}
            sizes="(max-width: 600px) 40px, (max-width: 900px) 60px, 160px"
            style={{ objectFit: "contain", width: "clamp(160px, 12vw, 160px)", height: "auto" }}
            priority
          />
        </Box>

        {/* OTP Form */}
        <Box
          component="form"
          onSubmit={handleSubmit}
          sx={{
            width: "100%",
            maxWidth: 420,
            display: "flex",
            flexDirection: "column",
            gap: { xs: 1, md: 2 },
            py: { xs: 0, md: 2 },
            position: "relative",
            zIndex: 1,
          }}
        >
          <Box textAlign="center">
            <Typography fontWeight={700} fontSize={{ xs: "clamp(16px,1.8vw,20px)", lg: "20px" }} color="#3D3D3D">
              OTP Verification
            </Typography>
            <Typography fontSize="clamp(11px,1.3vw,13px)" color="#6b7280">
              Please enter the 6 digit code to continue
            </Typography>
          </Box>

          {/* OTP Input Boxes */}
          <Box display="flex" justifyContent="center" gap={1.5} className={shake ? "shake" : ""} mb={1}>
            {otp.map((digit, idx) => (
              <TextField
                key={idx}
                id={`otp-${idx}`}
                value={digit}
                onChange={(e) => handleChange(e.target.value, idx)}
                onKeyDown={(e) => handleKeyDown(e, idx)}
                onPaste={idx === 0 ? handlePaste : undefined}
                inputProps={{
                  maxLength: 1,
                  style: {
                    textAlign: "center",
                    fontSize: "1.5rem",
                    fontWeight: 600,
                    padding: "12px",
                    width: "48px",
                  },
                  disabled: loading,
                }}
                sx={{
                  "& .MuiOutlinedInput-root": {
                    borderRadius: "8px",
                    "& fieldset": { borderColor: "#a8a8a8" },
                    "&:hover fieldset": { borderColor: "#808080" },
                    "&.Mui-focused fieldset": { borderColor: "#4285F4" },
                  },
                }}
              />
            ))}
          </Box>
          {error && (
            <Typography color="error" textAlign="center" fontSize="0.9rem">
              {error}
            </Typography>
          )}

          {/* Continue Button */}
          <Button
            fullWidth
            variant="contained"
            type="submit"
            disabled={!isOtpComplete || loading}
            sx={{
              backgroundColor: "#4285F4",
              fontWeight: 600,
              textTransform: "none",
              borderRadius: "8px",
              py: { sm: 0.8, xl: 2 },
              fontSize: "clamp(12px,1.5vw,14px)",
            }}
          >
            {loading ? (
              <>
                Verifying...
                <CircularProgress size={22} sx={{ color: "#fff", ml: 1 }} />
              </>
            ) : (
              "Continue"
            )}
          </Button>

          {/* Resend OTP */}
          <Typography textAlign="center" color="#6b7280" mt={1} fontSize="clamp(11px,1.3vw,13px)">
            Didnâ€™t receive the code?{" "}
            {isResendEnabled ? (
              <Typography
                component="span"
                sx={{
                  color: resendLoading ? "#ccc" : "#4285F4",
                  fontWeight: 500,
                  cursor: resendLoading ? "not-allowed" : "pointer",
                }}
                onClick={resendLoading ? undefined : handleResend}
              >
                {resendLoading ? (
                  <>
                    Resending...
                    <CircularProgress size={12} sx={{ color: "#ccc", ml: 0.5 }} />
                  </>
                ) : (
                  "Resend"
                )}
              </Typography>
            ) : (
              <span>
                Resend in{" "}
                <span style={{ color: "#4285F4", fontWeight: 500 }}>
                  {`${Math.floor(timer / 60).toString().padStart(2, "0")}:${(timer % 60)
                    .toString()
                    .padStart(2, "0")}`}
                </span>
              </span>
            )}
          </Typography>
        </Box>

        {/* Footer Text */}
        <Box mb={{ sm: 0, xl: 3 }} position="relative" zIndex={1}>
          <Typography
            sx={{
              mb: { sm: 0, xl: 3 },
              color: "#6B7280",
              textAlign: "center",
              maxWidth: "90%",
              mx: "auto",
              lineHeight: 1.2,
              fontSize: "clamp(9px,1vw,16px)",
            }}
          >
            Join our platform to securely manage your healthcare facility, collaborate with your team, and access tools that enhance patient care.
          </Typography>
        </Box>
      </Box>

      {/* Right Image */}
      <Box
        sx={{
          display: { xs: "none", lg: "flex" },
          flex: 1,
          height: "calc(100% - 60px)",
          mt: "30px",
          mb: "30px",
          position: "relative",
          borderRadius: "24px",
          overflow: "hidden",
        }}
      >
        <Image
          src="/login_bg.svg"
          alt="Doctor"
          fill
          style={{
            objectFit: "cover",
            borderRadius: "24px",
          }}
          priority
        />
      </Box>

      {/* Shake Animation */}
      <style jsx global>{`
        .shake {
          animation: shake 0.4s ease;
        }
        @keyframes shake {
          0% { transform: translateX(0px); }
          25% { transform: translateX(-4px); }
          50% { transform: translateX(4px); }
          75% { transform: translateX(-4px); }
          100% { transform: translateX(0px); }
        }
      `}</style>
    </Box>
  );
};

export default OTPPage;
