"use client";
import React, { useState } from 'react';
import Image from 'next/image';
import {
  Box,
  Button,
  Typography,
  TextField,
  InputAdornment,
  CircularProgress,
} from '@mui/material';
import { Email } from '@mui/icons-material';
import { Inter } from 'next/font/google';
import { toast } from 'react-toastify';
import { useMutation } from '@apollo/client';
import { FORGOT_PASSWORD_MUTATION } from '../../../graphql/mutations/auth';
import { useRouter } from 'next/navigation';

const inter = Inter({ subsets: ['latin'], weight: ['400', '500', '600', '700'] });

interface ForgotPasswordInput {
  email: string;
}

const ForgotPasswordPage: React.FC = () => {
  const router = useRouter();
  const [email, setEmail] = useState('');
  const [errors, setErrors] = useState<{ email?: string }>({});
  const [shake, setShake] = useState(false);
  const [forgotPassword, { loading }] = useMutation(FORGOT_PASSWORD_MUTATION);

  const validateEmailFormat = (email: string) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {
    const { value } = e.target;
    if (!value) setErrors({ email: 'Email is required' });
    else if (!validateEmailFormat(value)) setErrors({ email: 'Please enter a valid email address' });
    else setErrors({});
  };

  const triggerShake = () => {
    setShake(true);
    setTimeout(() => setShake(false), 500);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!email) {
      setErrors({ email: 'Email is required' });
      triggerShake();
      return;
    }
    if (!validateEmailFormat(email)) {
      setErrors({ email: 'Please enter a valid email address' });
      triggerShake();
      return;
    }
    try {
      const input: ForgotPasswordInput = { email };
      const response = await forgotPassword({ variables: { input } });
      const result = response.data.forgotPassword;
      const apiMessage = result.message || 'Something went wrong';

      if (result.status === 'success') {
        setErrors({});
        toast.success(apiMessage);
        setTimeout(() => {
          router.push(`/auth/otp-verification?email=${encodeURIComponent(email)}&context=reset`);
        }, 1500);
      } else {
        toast.error(apiMessage);
        triggerShake();
      }
    } catch (error) {
      console.error('Forgot Password error:', error);
      toast.error('An unexpected error occurred. Please try again.');
      triggerShake();
    }
  };

  return (
    <Box sx={{ display: 'flex', height: '100vh', bgcolor: '#fff' }} className={inter.className}>
      {/* Background Overlay */}
      <Box
        sx={{
          position: 'absolute',
          inset: 0,
          backgroundImage: "url('/login_bg.svg')",
          backgroundSize: 'cover',
          backgroundPosition: 'center',
          opacity: 0.1,
          zIndex: 0,
        }}
      />

      {/* Left Content */}
      <Box
        sx={{
          flex: 1.1,
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'space-between',
          alignItems: 'center',
          px: { xs: 1.5, md: 2 },
          py: { xs: 0.5, md: 1 },
          height: '100vh',
          position: 'relative',
        }}
      >
        {/* Logo */}
        <Box sx={{ mt: { xs: 0, xl: '13px' } }}>
          <Image
            src="/medical-logo.png"
            alt="Company Logo"
            width={0}
            height={0}
            sizes="(max-width: 600px) 40px, (max-width: 900px) 60px, 160px"
            style={{ objectFit: 'contain', width: 'clamp(160px, 12vw, 160px)', height: 'auto' }}
            priority
          />
        </Box>

        {/* Form Section */}
        <Box
          component="form"
          onSubmit={handleSubmit}
          sx={{
            width: '100%',
            maxWidth: 420,
            display: 'flex',
            flexDirection: 'column',
            gap: { xs: 1, md: 2 },
            py: { xs: 0, md: 2 },
            position: 'relative',
            zIndex: 1,
          }}
          className={shake ? 'shake' : ''}
        >
          <Box textAlign="center">
            <Typography fontWeight={700} fontSize={{ xs: 'clamp(16px,1.8vw,20px)', lg: '20px' }} color="#3D3D3D">
              Forgot Password
            </Typography>
            <Typography fontSize="clamp(11px,1.3vw,13px)" color="#6b7280" sx={{ mt: 1 }}>
              Enter your email so we can send instructions to reset your password.
            </Typography>
          </Box>

          {/* Email Field */}
          <TextField
            name="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            onBlur={handleBlur}
            label="Email"
            placeholder="Email"
            fullWidth
            error={!!errors.email}
            helperText={errors.email || ' '}
            FormHelperTextProps={{ sx: { minHeight: '20px' } }}
            InputLabelProps={{
              shrink: true,
              sx: {
                fontSize: '0.95rem',
                color: '#9ca3af',
                '&.Mui-focused': { color: '#9ca3af' },
                transform: 'translate(14px, 16px) scale(1)',
                '&.MuiInputLabel-shrink': {
                  transform: 'translate(14px, -8px) scale(0.85)',
                  backgroundColor: '#fff',
                  px: 0.5,
                },
              },
            }}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start" sx={{ pr: 1 }}>
                  <Email fontSize="small" style={{ opacity: 0.7 }} />
                  <Box sx={{ height: 28, width: '1px', bgcolor: '#b0b0b0', ml: 1 }} />
                </InputAdornment>
              ),
              sx: {
                borderRadius: '12px',
                backgroundColor: '#fff',
                '& fieldset': { borderColor: '#a8a8a8' },
                '&:hover fieldset': { borderColor: '#808080' },
                '&.Mui-focused fieldset': { borderColor: '#4285F4' },
                fontSize: '1rem',
                py: 0.5,
              },
            }}
            variant="outlined"
          />

          {/* Submit Button */}
          <Button
            fullWidth
            variant="contained"
            type="submit"
            disabled={loading}
            sx={{
              backgroundColor: '#4285F4',
              fontWeight: 600,
              textTransform: 'none',
              borderRadius: '8px',
              py: { sm: 0.8, xl: 2 },
              fontSize: 'clamp(12px,1.5vw,14px)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: 1.5,
              '&:hover': { backgroundColor: '#3367D6' },
            }}
          >
            {loading ? (
              <>
                Sending...
                <CircularProgress size={22} sx={{ color: '#fff' }} />
              </>
            ) : (
              'Continue'
            )}
          </Button>
        </Box>

        {/* Bottom Text */}
        <Box mb={{ sm: 0, xl: 3 }} position="relative" zIndex={1}>
          <Typography
            sx={{
              mb: { sm: 0, xl: 3 },
              color: '#6B7280',
              textAlign: 'center',
              maxWidth: '90%',
              mx: 'auto',
              lineHeight: 1.2,
              fontSize: 'clamp(9px,1vw,16px)',
            }}
          >
            Join our platform to securely manage your healthcare facility, collaborate with your team, and access tools that enhance patient care.
          </Typography>
        </Box>
      </Box>

      {/* Right Image */}
      <Box
        sx={{
          display: { xs: 'none', lg: 'flex' },
          flex: 1,
          height: 'calc(100% - 60px)',
          mt: '30px',
          mb: '30px',
          position: 'relative',
          borderRadius: '24px',
          overflow: 'hidden',
        }}
      >
        <Image
          src="/login_bg.svg"
          alt="Doctor"
          fill
          style={{
            objectFit: 'cover',
            borderRadius: '24px',
          }}
          priority
        />
      </Box>

      {/* Shake Animation */}
      <style jsx global>{`
        .shake {
          animation: shake 0.4s ease;
        }
        @keyframes shake {
          0% { transform: translateX(0px); }
          25% { transform: translateX(-4px); }
          50% { transform: translateX(4px); }
          75% { transform: translateX(-4px); }
          100% { transform: translateX(0px); }
        }
      `}</style>
    </Box>
  );
};

export default ForgotPasswordPage;
