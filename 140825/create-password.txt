/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";
import React, { useState } from "react";
import { useRouter } from "next/navigation";
import { useMutation } from "@apollo/client";
import { useDispatch } from "react-redux";
import { SET_PASSWORD_MUTATION, ADMIN_SET_PASSWORD_MUTATION } from "../../../graphql/mutations/auth";
import { SetPasswordInput } from "../../../../../shared-types/src/auth/auth.types";
import { toast } from "react-toastify";
import {
  Box,
  Typography,
  IconButton,
  InputAdornment,
  TextField,
} from "@mui/material";
import { Visibility, VisibilityOff, Lock } from "@mui/icons-material";
import { Inter } from "next/font/google";

// Shared UI
import AuthLayout from "../_shared/AuthLayout";
import HeaderLogo from "../_shared/HeaderLogo";
import AuthButton from "../_shared/AuthButton";
import AuthFooterNote from "../_shared/AuthFooterNote";
import RightImage from "../_shared/RightImage";

const inter = Inter({ subsets: ["latin"], weight: ["400", "500", "600", "700"] });

interface CreatePasswordPageProps {
  type?:  "user" | "admin"; // match your SignIn/OTP pattern
}

const CreatePasswordPage: React.FC<CreatePasswordPageProps> = ({ type }) => {
  const [form, setForm] = useState({ password: "", confirmPassword: "" });
  const [touched, setTouched] = useState({ password: false, confirmPassword: false });
  const [showPassword, setShowPassword] = useState(true);
  const [showConfirmPassword, setShowConfirmPassword] = useState(true);
  const router = useRouter();
  const dispatch = useDispatch();

  // user + admin mutations (we'll choose at runtime)
  const [setPassword, { loading: userLoading }] = useMutation(SET_PASSWORD_MUTATION);
  const [adminSetPassword, { loading: adminLoading }] = useMutation(ADMIN_SET_PASSWORD_MUTATION);
  const loading = userLoading || adminLoading;

  // Portal detection: primary from props, fallback to runtime (keeps old behavior intact)
  const isAdminFromProp =
    type === "admin" 
  const runtimeAdmin =
    typeof window !== "undefined" &&
    (window.location.pathname.includes("/admin") || window.location.hostname.includes("admin"));
  const isAdminPortal = Boolean(isAdminFromProp || runtimeAdmin);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setForm((p) => ({ ...p, [name]: value }));
  };

  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {
    const { name } = e.target;
    setTouched((p) => ({ ...p, [name]: true } as any));
  };

  const passwordsMatch = form.confirmPassword === form.password || !form.confirmPassword;
  const isPasswordFilled = form.password.length > 0;
  const canSubmit = isPasswordFilled && passwordsMatch && form.confirmPassword.length > 0;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!canSubmit) return;

    try {
      const urlParams = new URLSearchParams(window.location.search);
      const email = urlParams.get("email");
      const flow = urlParams.get("flow") || "signup";

      if (!email) {
        toast.error("Email not found. Please try the process again.");
        return;
      }

      const input: SetPasswordInput = {
        email,
        password: form.password,
        confirmPassword: form.confirmPassword,
      };

      // Choose the correct API by portal
      let result: any | undefined;
      if (isAdminPortal) {
        const response = await adminSetPassword({ variables: { input } });
        result = response?.data?.adminsetPassword; // ← your exact field
      } else {
        const response = await setPassword({ variables: { input } });
        result = response?.data?.setPassword;
      }

      if (!result) {
        toast.error("Invalid response from server");
        return;
      }
      if (result.error) {
        toast.error(result.message || "Failed to set password");
        return;
      }

      if (result.status === "success") {
        toast.success(
          result.message ||
            (flow === "forgot"
              ? "Password reset successfully! Please sign in."
              : "Password set successfully!")
        );
        // keep behavior exactly the same:
        router.push("/dashboard");
      } else {
        toast.error(result.message || "Failed to set password");
      }
    } catch (err) {
      console.error("Set Password error:", err);
      toast.error("An unexpected error occurred. Please try again.");
    }
  };

  const renderPasswordField = (
    name: "password" | "confirmPassword",
    label: string,
    show: boolean,
    handleShow: () => void
  ) => {
    const isConfirm = name === "confirmPassword";
    const showError = isConfirm && touched.confirmPassword && !passwordsMatch;

    return (
      <TextField
        name={name}
        value={(form as any)[name]}
        onChange={handleInputChange}
        onBlur={handleBlur}
        label={label}
        placeholder={label}
        type={!show ? "text" : "password"}
        fullWidth
        error={showError}
        helperText={showError ? "Passwords do not match" : " "}
        FormHelperTextProps={{ sx: { minHeight: "20px" } }}
        InputLabelProps={{
          shrink: true,
          sx: {
            fontSize: "0.95rem",
            color: "#9ca3af",
            "&.Mui-focused": { color: "#9ca3af" },
            transform: "translate(14px, 16px) scale(1)",
            "&.MuiInputLabel-shrink": {
              transform: "translate(14px, -8px) scale(0.85)",
              backgroundColor: "#fff",
              px: 0.5,
            },
          },
        }}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start" sx={{ pr: 1 }}>
              <Lock fontSize="small" style={{ opacity: 0.7 }} />
              <Box sx={{ height: 28, width: "1px", bgcolor: "#b0b0b0", ml: 1 }} />
            </InputAdornment>
          ),
          endAdornment: (
            <InputAdornment position="end">
              <IconButton onClick={handleShow}>
                {show ? <VisibilityOff /> : <Visibility />}
              </IconButton>
            </InputAdornment>
          ),
          sx: {
            borderRadius: "12px",
            backgroundColor: "#fff",
            "& fieldset": { borderColor: showError ? "#d32f2f" : "#a8a8a8" },
            "&:hover fieldset": { borderColor: showError ? "#d32f2f" : "#808080" },
            "&.Mui-focused fieldset": { borderColor: showError ? "#d32f2f" : "#4285F4" },
            fontSize: "1rem",
            py: 0.5,
          },
        }}
        variant="outlined"
      />
    );
  };

  return (
    <AuthLayout header={<HeaderLogo />} footer={<AuthFooterNote />} right={<RightImage />}>
      <Box
        component="form"
        onSubmit={handleSubmit}
        className={inter.className}
        sx={{
          width: "100%",
          maxWidth: 420,
          display: "flex",
          flexDirection: "column",
          gap: { xs: 1, md: 2 },
          py: { xs: 0, md: 2 },
          position: "relative",
          zIndex: 1,
        }}
      >
        <Box textAlign="center">
          <Typography
            fontWeight={700}
            fontSize={{ xs: "clamp(16px,1.8vw,20px)", lg: "20px" }}
            color="#3D3D3D"
          >
            Create New Password
          </Typography>
          <Typography fontSize="clamp(11px,1.3vw,13px)" color="#6b7280">
            Set a secure password to continue
          </Typography>
        </Box>

        {renderPasswordField("password", "Password", showPassword, () => setShowPassword(!showPassword))}
        {renderPasswordField("confirmPassword", "Confirm Password", showConfirmPassword, () =>
          setShowConfirmPassword(!showConfirmPassword)
        )}

        <AuthButton
          text="Continue"
          loadingText="Setting Password..."
          loading={loading}
          disabled={!canSubmit || loading}
          fullWidth
          sx={{
            "&:disabled": { backgroundColor: "#ccc", cursor: "not-allowed" },
          }}
        />
      </Box>
    </AuthLayout>
  );
};

export default CreatePasswordPage;
