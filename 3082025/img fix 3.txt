"use client";
import React, { useState } from "react";
import Image from "next/image";
import {
  Box,
  TextField,
  Button,
  Typography,
  IconButton,
  InputAdornment,
  CircularProgress,
} from "@mui/material";
import { useRouter } from "next/navigation";
import EmailIcon from "@mui/icons-material/Email";
import Lock from "@mui/icons-material/Lock";
import Visibility from "@mui/icons-material/Visibility";
import VisibilityOff from "@mui/icons-material/VisibilityOff";
import { Inter } from "next/font/google";
import { toast } from "react-toastify";
import { useMutation } from "@apollo/client";
import { SIGNIN_MUTATION } from "../../../graphql/mutations/auth";

const inter = Inter({ subsets: ["latin"], weight: ["400", "500", "600", "700"] });

interface FormState {
  email: string;
  password: string;
}
interface FormErrors {
  email: string;
  password: string;
}

const SharedSignIn = () => {
  const [tab, setTab] = useState(0);
  const [showPassword, setShowPassword] = useState(false);
  const router = useRouter();
  const [form, setForm] = useState<FormState>({ email: "", password: "" });
  const [errors, setErrors] = useState<FormErrors>({ email: "", password: "" });
  const [signIn, { loading }] = useMutation(SIGNIN_MUTATION);

  const validateEmail = (email: string): string => {
    if (!email) return "Email is required";
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) return "Please enter a valid email address";
    return "";
  };

  const validatePassword = (password: string): string => {
    if (!password) return "Password is required";
    if (password.length < 6) return "Password must be at least 6 characters";
    return "";
  };

  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    let fieldError = "";
    if (name === "email") fieldError = validateEmail(value);
    if (name === "password") fieldError = validatePassword(value);
    setErrors((prev) => ({ ...prev, [name]: fieldError }));
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setForm({ ...form, [name]: value });
  };

  const validateForm = (): boolean => {
    const emailError = validateEmail(form.email);
    const passwordError = validatePassword(form.password);
    setErrors({ email: emailError, password: passwordError });
    return !emailError && !passwordError;
  };

  const handleContinue = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (!validateForm()) return;

    try {
      const res = await signIn({
        variables: { input: { emailOrPhone: form.email, password: form.password } },
      });

      const result = res.data?.signIn;
      if (!result) {
        toast.error("No response from server. Please try again.");
        return;
      }

      if (result.status !== "success") {
        toast.error(result.message || "Sign in failed. Please check your credentials or try again later.");
        return;
      }

      toast.success("Sign in successful!");
      const token = result.data?.token || null;
      if (token) {
        document.cookie = `token=${token}; path=/`;
      }
      router.push("/dashboard");
    } catch (err: any) {
      console.error("Login failed", err);
      const gqlMessage =
        err?.graphQLErrors?.[0]?.message ||
        err?.message ||
        "An unexpected error occurred. Please try again.";
      toast.error(gqlMessage);
    }
  };

  const handleClickShowPassword = () => setShowPassword(!showPassword);

  return (
    <Box sx={{ display: "flex", height: "100vh", bgcolor: "#fff" }}>
      {/* LEFT CONTENT */}
      <Box
        sx={{
          flex: 1.1,
          display: "flex",
          flexDirection: "column",
          justifyContent: "space-between",
          alignItems: "center",
          px: { xs: 1.5, md: 2 },
          py: { xs: 0.5, md: 1 },
          height: "100vh",
          position: "relative",
        }}
      >
        {/* LOGO */}
        <Box>
          <Image
            src="/medical-logo.png"
            alt="Company Logo"
            width={0}
            height={0}
            sizes="(max-width: 600px) 40px, (max-width: 900px) 60px, 160px"
            style={{ objectFit: "contain", width: "clamp(160px, 12vw, 160px)", height: "auto",  }}
            priority
            className="mt-0 md:mt-5 lg:mt-12"
          />
        </Box>

        {/* LEFT BACKGROUND IMAGE */}
        <Box
          sx={{
            position: "absolute",
            inset: 0,
            backgroundImage: "url('/login_bg.svg')",
            backgroundSize: "cover",
            backgroundPosition: "center",
            opacity: 0.07,
            zIndex: 0,
          }}
        />

        {/* FORM */}
        <Box
          component="form"
          onSubmit={handleContinue}
          sx={{
            width: "100%",
            maxWidth: 420,
            display: "flex",
            flexDirection: "column",
            gap: { xs: 1, md: 2 },
            py: { xs: 0, md: 2 },
            position: "relative",
            zIndex: 1,
          }}
        >
          <Box textAlign="center">
            <Typography fontWeight={700} fontSize={{ xs: "clamp(16px,1.8vw,20px)", lg: "20px" }} color="#3D3D3D">
              Welcome Back
            </Typography>
            <Typography fontSize="clamp(11px,1.3vw,13px)" color="#6b7280">
              Please enter your details to continue
            </Typography>
          </Box>

          {/* Tabs */}
          <Box
            position="relative"
            display="flex"
            width="100%"
            borderRadius={2}
            bgcolor="#f0eeed"
            p={{ xs: 0.8, sm: 0.8, lg: 1 }}
            mb={{ xs: 3,xl:6}}
          >
            <Box
              position="absolute"
              top={3}
              left={tab === 0 ? 3 : "50%"}
              width="calc(50% - 6px)"
              height="calc(100% - 6px)"
              borderRadius={2}
              bgcolor="#fff"
              boxShadow={1}
              zIndex={1}
           sx={{ transition: "left 0.3s cubic-bezier(.4,1.3,.6,1)" }}
            />
            <Button
              onClick={() => {
                setTab(0);
                router.push("/auth/signin");
              }}
              sx={{
                flex: 1,
                py: 0.4,
                fontWeight: tab === 0 ? 700 : 500,
                fontSize: "clamp(11px,1.3vw,16px)",
                zIndex: 2,
                color: tab === 0 ? "#000" : "#9ca3af",
                textTransform: "none",
              }}
            >
              Sign In
            </Button>
            <Button
              onClick={() => {
                setTab(1);
                router.push("/auth/signup");
              }}
              sx={{
                flex: 1,
                py: 0.4,
                fontWeight: tab === 1 ? 700 : 500,
                fontSize: "clamp(11px,1.3vw,13px)",
                zIndex: 2,
                color: tab === 1 ? "#000" : "#9ca3af",
                textTransform: "none",
              }}
            >
              Sign Up
            </Button>
          </Box>

          {/* EMAIL FIELD */}
          <TextField
            name="email"
            value={form.email}
            onChange={handleInputChange}
            onBlur={handleBlur}
            label="Email or Phone Number"
            placeholder="Email"
            fullWidth
            error={!!errors.email}
            helperText={errors.email || " "}
            FormHelperTextProps={{ sx: { minHeight: "20px" } }}
            InputLabelProps={{
              shrink: true,
              sx: {
                fontSize: "0.95rem",
                color: "#9ca3af",
                "&.Mui-focused": { color: "#9ca3af" },
                transform: "translate(14px, 16px) scale(1)",
                "&.MuiInputLabel-shrink": {
                  transform: "translate(14px, -8px) scale(0.85)",
                  backgroundColor: "#fff",
                  px: 0.5,
                },
              },
            }}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start" sx={{ pr: 1 }}>
                  <EmailIcon fontSize="small" style={{ opacity: 0.7 }} />
                  <Box sx={{ height: 28, width: "1px", bgcolor: "#b0b0b0", ml: 1 }} />
                </InputAdornment>
              ),
              sx: {
                borderRadius: "12px",
                backgroundColor: "#fff",
                "& fieldset": { borderColor: "#a8a8a8" },
                "&:hover fieldset": { borderColor: "#808080" },
                "&.Mui-focused fieldset": { borderColor: "#4285F4" },
                fontSize: "1rem",
                py: 0.5,
              },
            }}
            variant="outlined"
          />

          {/* PASSWORD FIELD */}
          <TextField
            name="password"
            value={form.password}
            onChange={handleInputChange}
            onBlur={handleBlur}
            label="Password"
            placeholder="Password"
            type={showPassword ? "text" : "password"}
            fullWidth
            error={!!errors.password}
            helperText={errors.password || " "}
            FormHelperTextProps={{ sx: { minHeight: "20px" } }}
            InputLabelProps={{
              shrink: true,
              sx: {
                fontSize: "0.95rem",
                color: "#9ca3af",
                "&.Mui-focused": { color: "#9ca3af" },
                transform: "translate(14px, 16px) scale(1)",
                "&.MuiInputLabel-shrink": {
                  transform: "translate(14px, -8px) scale(0.85)",
                  backgroundColor: "#fff",
                  px: 0.5,
                },
              },
            }}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start" sx={{ pr: 1 }}>
                  <Lock fontSize="small" style={{ opacity: 0.7 }} />
                  <Box sx={{ height: 28, width: "1px", bgcolor: "#b0b0b0", ml: 1 }} />
                </InputAdornment>
              ),
              endAdornment: (
                <InputAdornment position="end">
                  <IconButton onClick={handleClickShowPassword}>
                    {showPassword ? <VisibilityOff /> : <Visibility />}
                  </IconButton>
                </InputAdornment>
              ),
              sx: {
                borderRadius: "12px",
                backgroundColor: "#fff",
                "& fieldset": { borderColor: "#a8a8a8" },
                "&:hover fieldset": { borderColor: "#808080" },
                "&.Mui-focused fieldset": { borderColor: "#4285F4" },
                fontSize: "1rem",
                py: 0.5,
              },
            }}
            variant="outlined"
          />

          {/* CONTINUE BUTTON */}
          <Button
            fullWidth
            variant="contained"
            type="submit"
            disabled={loading}
            sx={{
              backgroundColor: "#4285F4",
              fontWeight: 600,
              textTransform: "none",
              borderRadius: "8px",
              py: {sm:0.8,xl:2},
              fontSize: "clamp(12px,1.5vw,14px)",
            }}
          >
            {loading ? (
              <>
                Signing in...
                <CircularProgress size={22} sx={{ color: "#fff", ml: 1 }} />
              </>
            ) : (
              "Continue"
            )}
          </Button>

          {/* Forgot Password */}
          <Typography
            sx={{
              color: "#6b7280",
              textDecoration: "underline",
              cursor: "pointer",
              textAlign: "center",
              fontSize: "clamp(11px,1.3vw,13px)",
            }}
            onClick={() => router.push("/auth/forgot-password")}
          >
            Forgot Password?
          </Typography>
        </Box>

        {/* Bottom Text */}
        <Box mb={{sm:1,xl:4}} position="relative" zIndex={1}>
          <Typography
            sx={{
              mb: { sm: 1, xl: 4 },
              color: "#6B7280",
              textAlign: "center",
              maxWidth: "90%",
              mx: "auto",
              lineHeight: 1.2,
              fontSize: "clamp(9px,1vw,16px)",
            }}
          >
            Join our platform to securely manage your healthcare facility, collaborate with your team, and access tools that enhance patient care.
          </Typography>
        </Box>
      </Box>

      {/* RIGHT IMAGE */}
      <Box
        sx={{
          display: { xs: "none", lg: "flex" },
          flex: 1.1,
          height: "100%",
          position: "relative",
          borderRadius: "0 24px 24px 0",
          overflow: "hidden",
        }}
      >
        <Image
          src="/login_bg.svg"
          alt="Doctor"
          fill
          style={{ objectFit: "cover", borderRadius: "0 24px 24px 0" }}
          priority
        />
      </Box>
    </Box>
  );
};

export default SharedSignIn;
